# Makefile para Tasks API
.PHONY: setup up down logs clean migrate migrate-revert generate-migration help

# Cores para output
GREEN=\033[0;32m
YELLOW=\033[1;33m
NC=\033[0m # No Color

DOCKER_COMPOSE_FILE=docker-compose.dev.yml
CONTAINER_NAME=tasks-api-dev


setup:
	@echo "$(GREEN)üöÄ Iniciando setup completo do projeto...$(NC)"
	@$(MAKE) up
	@echo "$(YELLOW)‚è≥ Aguardando containers iniciarem...$(NC)"
	@sleep 10
	@$(MAKE) migrate
	@echo "$(GREEN)‚úÖ Setup conclu√≠do! API dispon√≠vel em http://localhost:3000$(NC)"

up:
	@echo "$(GREEN)üê≥ Subindo containers...$(NC)"
	docker compose -f $(DOCKER_COMPOSE_FILE) up -d --build

down:
	@echo "$(YELLOW)üõë Parando containers...$(NC)"
	docker compose -f $(DOCKER_COMPOSE_FILE) down

# Ver logs
logs:
	@echo "$(GREEN)üìã Mostrando logs da aplica√ß√£o...$(NC)"
	docker compose -f $(DOCKER_COMPOSE_FILE) logs -f api-dev

logs-db:
	@echo "$(GREEN)üìã Mostrando logs do banco de dados...$(NC)"
	docker compose -f $(DOCKER_COMPOSE_FILE) logs -f mysql-dev

clean:
	@echo "$(YELLOW)üßπ Limpando containers e volumes...$(NC)"
	docker compose -f $(DOCKER_COMPOSE_FILE) down -v
	docker system prune -f


migrate:
	@echo "$(GREEN)üóÑÔ∏è Executando migra√ß√µes...$(NC)"
	docker exec -it $(CONTAINER_NAME) pnpm run migration:run

migrate-revert:
	@echo "$(YELLOW)‚Ü©Ô∏è Revertendo √∫ltima migra√ß√£o...$(NC)"
	docker exec -it $(CONTAINER_NAME) pnpm run migration:revert

# Gerar nova migra√ß√£o
# Uso: make generate-migration NAME=NomeDaMigracao
generate-migration:
	@if [ -z "$(NAME)" ]; then \
		echo "$(YELLOW)‚ùå Erro: NAME √© obrigat√≥rio. Use: make generate-migration NAME=NomeDaMigracao$(NC)"; \
		exit 1; \
	fi
	@echo "$(GREEN)üìù Gerando migra√ß√£o: $(NAME)...$(NC)"
	docker exec -it $(CONTAINER_NAME) npx typeorm-ts-node-commonjs migration:generate src/migrations/$(NAME) -d src/config/data-source.ts


shell:
	@echo "$(GREEN)üêö Acessando shell do container...$(NC)"
	docker exec -it $(CONTAINER_NAME) bash

install:
	@echo "$(GREEN)üì¶ Instalando depend√™ncias...$(NC)"
	docker exec -it $(CONTAINER_NAME) pnpm install

test:
	@echo "$(GREEN)üß™ Executando testes...$(NC)"
	docker exec -it $(CONTAINER_NAME) pnpm test

status:
	@echo "$(GREEN)üìä Status dos containers:$(NC)"
	docker compose -f $(DOCKER_COMPOSE_FILE) ps

restart:
	@echo "$(YELLOW)üîÑ Reiniciando aplica√ß√£o...$(NC)"
	@$(MAKE) down
	@$(MAKE) up

# Help
help:
	@echo "$(GREEN)Tasks API - Makefile Commands$(NC)"
	@echo ""
	@echo "$(YELLOW)Comandos principais:$(NC)"
	@echo "  setup              - Setup completo (containers + migra√ß√µes)"
	@echo "  up                 - Subir containers"
	@echo "  down               - Parar containers"
	@echo "  logs               - Ver logs da aplica√ß√£o"
	@echo "  logs-db            - Ver logs do banco"
	@echo "  clean              - Limpar containers e volumes"
	@echo ""
	@echo "$(YELLOW)Migra√ß√µes:$(NC)"
	@echo "  migrate            - Executar migra√ß√µes"
	@echo "  migrate-revert     - Reverter √∫ltima migra√ß√£o"
	@echo "  generate-migration - Gerar nova migra√ß√£o (NAME=NomeDaMigracao)"
	@echo ""
	@echo "$(YELLOW)Desenvolvimento:$(NC)"
	@echo "  shell              - Acessar shell do container"
	@echo "  install            - Instalar depend√™ncias"
	@echo "  test               - Executar testes"
	@echo "  status             - Ver status dos containers"
	@echo "  restart            - Reiniciar aplica√ß√£o"
	@echo "  help               - Mostrar esta ajuda"
	@echo ""
	@echo "$(GREEN)Para come√ßar rapidamente, execute: make setup$(NC)"

# Default target
.DEFAULT_GOAL := help
